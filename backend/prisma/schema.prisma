// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
	provider = "prisma-client-js"
}

datasource db {
	provider = "postgresql"
	url      = env("DATABASE_URL")
}

model Clients {
	id       Int      @id @default(autoincrement())
	img      Bytes?
	name     String   @db.VarChar(50) @unique
	pseudo   String   @db.VarChar(50) @unique
	email    String   @db.VarChar(100) @unique
	cookie   String   @db.VarChar(200)
	num      String   @db.VarChar(15) @unique
	memberOf Int[]

	client1		ClientToClient[] @relation("ClientToClient_client1")
	client2		ClientToClient[] @relation("ClientToClient_client2")
	clientStats	ClientStats[]
	roomsOwned  Rooms[]   @relation("RoomsOwned")
	messages    MessagesRooms[]
	msgSent     MessagesClientToClient[] @relation("ClientToClient_client1")
	msgReceived MessagesClientToClient[] @relation("ClientToClient_client2")
}

model ClientToClient {
	id        Int       @id @default(autoincrement())
	client1Id	Int
	client1   Clients   @relation("ClientToClient_client1", fields: [client1Id], references: [id])
	client2Id	Int
	client2   Clients   @relation("ClientToClient_client2", fields: [client2Id], references: [id])
	status    String    @db.VarChar(10)

	@@index([status])
	@@map("clients_to_clients")
}

model ClientStats {
	id        Int		@id @default(autoincrement())
	client    Clients	@relation(fields: [clientId], references: [id])
	clientId  Int		@unique
	title     String	@db.VarChar(50)
	played    Int
	won       Int
	score     Int
	hf        String	@db.VarChar(100)

	@@map("client_stats")
}

model Rooms {
	id       Int      @id @default(autoincrement())
	name     String   @db.VarChar(50)
	ownerid  Int
	owner    Clients  @relation("RoomsOwned", fields: [ownerid], references: [id])
	admins   Int[]
	members  Int[]

	messages    MessagesRooms[]

	@@map("rooms")
	@@index([ownerid], name: "owner_idx")
	@@unique([name], name: "name_uniq")
}

model MessagesRooms {
	id       Int       @id @default(autoincrement())
	client   Clients   @relation(fields: [clientId], references: [id])
	room     Rooms     @relation(fields: [roomId], references: [id])
	msg      String
	time     DateTime  @default(now())
	roomId   Int
	clientId Int

	@@map("messages_rooms")
}

model MessagesClientToClient {
	id            Int     @id @default(autoincrement())
	clientSrc     Clients  @relation("ClientToClient_client1", fields: [clientSrcId], references: [id])
	clientSrcId   Int
	clientDest    Clients  @relation("ClientToClient_client2", fields: [clientDestId], references: [id])
	clientDestId  Int
	message       String
	time          DateTime @default(now())
	
	@@map("messages_client_to_client")
}
