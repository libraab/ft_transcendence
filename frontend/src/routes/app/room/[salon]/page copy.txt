<script lang="ts">
	import { onMount } from "svelte";
	import { hostname } from "../../../hostname";
	import { img_path, userId42, clientName } from "../../../stores";

	export let data;

	let delTab: string;

	onMount(async () => {
		$img_path = data.img_path;
		$userId42 = data.userId42;

		try
		{
			const response = await fetch(`http://${hostname}:3000/dashboard/${data.userId42}`);
			if (response.ok)
			{
				let vals = await response.json();
				$clientName = vals.name;
			}
			else
				console.error("layout");

		}
		catch (error)
		{
			console.error("layout" , error);
		}
	});

	let inspectBoolean = false;
	function inspectToggle()
	{
		inspectBoolean = !inspectBoolean;
		if (!inspectBoolean)
		{
			choosenRoom = null;
			choosenRoomId = null;
			privateRoomMembers = null;
			roomMembers = [];
		}
	}

	let privateRoomMembers = null;
	async function fetchprivateRoomMembers()
	{
		try
		{
			const response = await fetch(`http://${hostname}:3000/rooms/privateRoomMember/${choosenRoomId}`);
			if (response.ok)
				privateRoomMembers = await response.json();
			else
				privateRoomMembers = null;
		}
		catch (error)
		{
			console.error(error);
		}
	}

	let roomMembers = [];
	async function fetchAllRoomMembers()
	{
		let url;
		if (status === 0)
			url = `http://${hostname}:3000/rooms/allRoomMember/${choosenRoomId}/${data.id}`;
		else
			url = `http://${hostname}:3000/rooms/allRoomMemberForAdmins/${choosenRoomId}/${data.id}`;

		try
		{
			const response = await fetch(url);
			if (response.ok)
				roomMembers = await response.json();
			else
				roomMembers = null;
		}
		catch (error)
		{
			console.error(error);
		}
	}

	async function accept(client: any) {
		try {
			const response = await fetch(`http://${hostname}:3000/rooms/acceptNewMember/${choosenRoomId}/${client.id}`, {
				method: 'POST',
			});

			if (response.ok)
			{
				console.log('New member accepted');
				// Mettez à jour votre état ou effectuez toute autre action nécessaire ici
			}
			else
			{
				const errorText = await response.text();
				throw new Error(errorText);
			}
		}
		catch (error)
		{
			console.error(error);
		}
		await fetchAllRoomMembers();
		await fetchprivateRoomMembers();
	}

	async function updateClientStatus(roomId: number, clientId: number, status: number) {
		try {
			const response = await fetch(`http://${hostname}:3000/rooms/updateStatus/${roomId}/${clientId}/${status}`, {
				method: 'POST',
			});

			if (response.ok)
			{
				console.log('Status updated successfully');
			}
			else
			{
				console.error('Failed to update status');
			}
		}
		catch (error)
		{
			console.error('An error occurred', error);
		}
	}


	async function promote(client: any)
	{
		await updateClientStatus(choosenRoomId, client.id, 1);
		await fetchAllRoomMembers();
	}
	
	async function demote(client: any)
	{
		await updateClientStatus(choosenRoomId, client.id, 2);
		await fetchAllRoomMembers();
	}
	
	async function ban(client: any)
	{
		await updateClientStatus(choosenRoomId, client.id, 5);
		await fetchAllRoomMembers();
		await fetchprivateRoomMembers();
	}

	async function kick(client: any)
	{
		try {
			const response = await fetch(`http://${hostname}:3000/rooms/kick/${choosenRoomId}/${client.id}`, {
				method: 'POST',
			});

			if (response.ok)
				console.log('client kicked');
			else
			{
				const errorText = await response.text();
				throw new Error(errorText);
			}
		}
		catch (error: any)
		{
			throw new Error(error.message);
		}
		await fetchAllRoomMembers();
		await fetchprivateRoomMembers();
	}

	async function mute(client: any)
	{
		await updateClientStatus(choosenRoomId, client.id, 3);
		await fetchAllRoomMembers();
	}

	async function unmute(client: any)
	{
		await updateClientStatus(choosenRoomId, client.id, 2);
		await fetchAllRoomMembers();
	}
</script>
  
<div class="main_body">
	<main class="container">
		<div class="create-container">
			<h1>{choosenRoom}</h1>
			<center><button class="toggle-btn" on:click={() => inspectToggle()}>Back</button></center>
		</div>

		{#if privateRoomMembers && privateRoomMembers.length !== 0}
			<div class="rooms-container">
				<button class="toggle-btn">they wanna join</button>
				<div class="room-list">
					{#each privateRoomMembers as member}
						<div class="room-item">
							<p>{member.name}</p>
							<div class="buttons">
								<button on:click={() => accept(member)}>Accept</button>
								<button on:click={() => kick(member)}>Deny</button>
								<button on:click={() => ban(member)}>Ban</button>
							</div>
						</div>
					{/each}
				</div>
			</div>
		{/if}
		
<!--	{#if roomMembers && roomMembers.length !== 0}-->

			<div class="rooms-container">
				<button class="toggle-btn">Room Members</button>
				<div class="room-list">

					{#each roomMembers as member}
						<div class="room-item">
							<div>
								<p>{member.name}</p>
								<p>[{memberStatusLabels[member.status]}]</p>
							</div>

							<div class="buttons">
								{#if member.status === 5}
									<button on:click={() => kick(member)}>unban</button>
								{:else}
									{#if member.status === 2}
										<button on:click={() => promote(member)}>Promote</button>
									{:else if member.status === 1}
										<button on:click={() => demote(member)}>Demote</button>
									{/if}	

									{#if member.status === 3}
										<button on:click={() => unmute(member)}>unmute</button>
									{:else}
										<button on:click={() => mute(member)}>mute</button>
									{/if}
									<button on:click={() => kick(member)}>kick</button>
									<button on:click={() => ban(member)}>Ban</button>
								{/if}
							</div>
						</div>
					{/each}

				</div>
			</div>

<!--	{:else}
			<div style="display: block; text-align: center;">
				<p style="display: block;">feeling lonely ?</p>
				<img src="https://media.giphy.com/media/1isQ04fzbwXbJKucVI/giphy.gif" style="display: block; margin: 0 auto;" alt="whtever">
			</div>
		{/if}
-->
		<div class="create-container">
			<center><button class="toggle-btn" style="background-color: red;"
				on:click={() => toggleDel('del')}>Delete room
			</button></center>
			/̵͇̿̿/’̿’̿ ̿ ̿̿ ̿̿ ̿̿(╥﹏╥)

			<button class="toggle-btn" style="background-color: red; margin-top: auto;"
				on:click={() => toggleDel('res')}>Resign
			</button>
			(¬ _¬)ﾉ ciao
		</div>
	</main>
</div>
  
<style>
.container {
	height: 100%;
	display: flex;
	justify-content: space-around;
}
.create-container {
	flex: 1;
	padding: 10px;
	display: flex;
	flex-direction: column;
	justify-content: flex-start;
	align-items: center;
}
.rooms-container {
	flex: 1;
	padding: 10px;
	width: 200px;
	height: 300px;
	display: flex;
	flex-direction: column;
	align-items: center;
}
.room-list {
	flex: 1;
	overflow-y: scroll;
	display: none;
}

.toggle-btn,
.create-btn {
	border: none;
	background-color: #4caf50;
	border-radius: 20px;
	color: white;
	font-size: 16px;
	font-weight: bold;
	cursor: pointer;
	outline: none;
	padding: 10px 20px;
	margin-bottom: 10px;
	transition: background-color 0.3s ease;
}

.toggle-btn:hover,
.create-btn:hover {
	font-size: 20px;
	padding: 15px 30px;
	background-color: #2e8b57;
	text-decoration: underline;
}

.room-list {
	display: block;
}

.room-item {
	display: flex;
	justify-content: space-between;
	align-items: center;
}

h3 {
	margin-right: 10px;
}

.join-button {
	margin-left: 10px;
	margin-right: 0;
	align-self: flex-end;
}

</style>